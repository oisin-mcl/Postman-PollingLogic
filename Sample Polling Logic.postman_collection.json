{
	"info": {
		"_postman_id": "33272588-22f5-41c5-96fb-8d65ea983f43",
		"name": "Sample Polling Logic",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17202983"
	},
	"item": [
		{
			"name": "Wait Until Repsonse Returns",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that the expected 200 code is returned\r",
							"pm.test(\"Request Made Successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Get the response JSON returned from the request\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"console.log(Object.keys(responseJson.args).length);\r",
							"\r",
							"// Set the wait variables. This will loop a total of 60 times, once per second. Meaning, it will wait for 1 minute before timing out.\r",
							"const numOfLoops = 60;\r",
							"const waitAfterLoop = 1000;\r",
							"\r",
							"//Check if loop variable exists first. If not, create it. This is our counter\r",
							"if (!pm.collectionVariables.get(\"loop\")) {\r",
							"    pm.collectionVariables.set(\"loop\", 1);\r",
							"}\r",
							"\r",
							"// Wait logic \r",
							"\r",
							"// This will first check if the response returns any fields in the \"args\" object. If it returns anything, then it will move on to the next request\r",
							"if (Object.keys(responseJson.args).length > 0) {\r",
							"\r",
							"    postman.setNextRequest(\"Wait Until Repsonse Returns Arguments\");\r",
							"    pm.collectionVariables.set(\"loop\", 1);\r",
							"    console.log(\"request complete\");\r",
							"\r",
							"} else if ((Object.keys(responseJson.args).length === 0) && (pm.collectionVariables.get(\"loop\") < numOfLoops)) {\r",
							"\r",
							"    // If it doesn't return anything in the args object, then it will loop over this request again, and increment our loop counter\r",
							"    console.log(\"request in progress\");\r",
							"    var Currentloops = parseInt(pm.collectionVariables.get(\"loop\"));\r",
							"    pm.collectionVariables.set(\"loop\", Currentloops + 1);\r",
							"    setTimeout(function () { }, waitAfterLoop);\r",
							"    postman.setNextRequest(\"Next Request\");\r",
							"\r",
							"} else {\r",
							"\r",
							"    // If it times out, it will just error out and stop the flow\r",
							"    postman.setNextRequest(null);\r",
							"    pm.collectionVariables.set(\"loop\", 1);\r",
							"    console.log(\"Error has occured\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		},
		{
			"name": "Next Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that the expected 200 code is returned\r",
							"pm.test(\"Request Made Successfully\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://postman-echo.com/get",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "loop",
			"value": ""
		}
	]
}